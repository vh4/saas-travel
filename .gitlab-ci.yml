stages:
  - check
  - build staging
  - cluster staging
  - deploy staging
  - build prod
  - cluster prod
  - deploy prod

check:
  stage: check
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  script:
    - sonar-scanner -X -Dproject.settings=$SONAR_PROPERTIES
  allow_failure: false
  only:
    refs:
      - production
  tags:
    - sonarrunner

build staging:
  stage: build staging
  environment: staging
  variables:
    DOCKER_CONFIG: "/tmp/docker-config-${CI_JOB_ID}"  # Unique config directory per job
  before_script:
    - export DOCKER_CONFIG=${DOCKER_CONFIG}  # Set the unique config directory
    - mkdir -p ${DOCKER_CONFIG}  # Create the directory if it doesn’t exist
    - docker login -u _json_key -p "$(echo $SA_REGISTRY)" https://asia.gcr.io
  script:
    - cp $ENV_FE .env
    - docker build -f k8s/Dockerfile -t asia.gcr.io/partnerlink-h2h/saas-travel-frontend:staging-latest .
    - docker push asia.gcr.io/partnerlink-h2h/saas-travel-frontend:staging-latest
  after_script:
    - docker logout asia.gcr.io
    - rm -rf ${DOCKER_CONFIG}  # Clean up the unique config directory
  needs: [check]
  when: on_success
  allow_failure: false
  only:
    refs:
      - production
  tags:
    - gitlabrunner01

cluster staging:
  stage: cluster staging
  environment: staging
  script:
    - kubectl apply -f k8s/staging/code.yml
  needs: [check, build staging]
  when: on_success
  allow_failure: false
  tags:
    - gitlabrunner01
  only:
    refs:
      - production

deploy staging:
  stage: deploy staging
  environment: staging
  needs: [check, build staging, cluster staging]
  when: on_success
  allow_failure: false
  script:
    - kubectl rollout restart deployment saas-travel-frontend
  after_script:
    - kubectl rollout status deployment saas-travel-frontend --timeout=90s || exit 1
  only:
    refs:
      - production
  tags:
    - gitlabrunner01

build prod:
  stage: build prod
  environment: prod
  variables:
    DOCKER_CONFIG: "/tmp/docker-config-${CI_JOB_ID}"  # Unique config directory per job
  before_script:
    - export DOCKER_CONFIG=${DOCKER_CONFIG}  # Set the unique config directory
    - mkdir -p ${DOCKER_CONFIG}  # Create the directory if it doesn’t exist
    - docker login -u _json_key -p "$(echo $SA_REGISTRY)" https://asia.gcr.io
  script:
    - cp $ENV_FE .env
    - docker build -f k8s/Dockerfile -t asia.gcr.io/partnerlink-h2h/saas-travel-frontend:latest .
    - docker push asia.gcr.io/partnerlink-h2h/saas-travel-frontend:latest
  after_script:
    - docker logout asia.gcr.io
    - rm -rf ${DOCKER_CONFIG}  # Clean up the unique config directory
  needs: [check]
  when: manual
  allow_failure: false
  only:
    refs:
      - production
  tags:
    - gitlabrunner01

cluster prod:
  stage: cluster prod
  environment: prod
  script:
    - kubectl apply -f k8s/prod/code.yml
  needs: [check, build prod]
  when: on_success
  allow_failure: false
  tags:
    - gitlabrunner01
  only:
    refs:
      - production

deploy prod:
  stage: deploy prod
  environment: prod
  needs: [check, build prod, cluster prod]
  when: on_success
  allow_failure: false
  script:
    - kubectl rollout restart deployment saas-travel-frontend
  after_script:
    - kubectl rollout status deployment saas-travel-frontend --timeout=90s || exit 1
  only:
    refs:
      - production
  tags:
    - gitlabrunner01
