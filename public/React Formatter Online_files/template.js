(()=>{"use strict";window["br_freestar_0_2"]=e=>{try{const t=window.googletag=window.googletag||{cmd:[]},n=window.freestar,i=e.templateParams.placementName,l=s(e.targeting);if(!n.newAdSlotsAllowed)return e.callback(!0,"newAdSlotsAllowed="+n.newAdSlotsAllowed);const o=25;let a,d=e.prebidGlobalInstanceName&&window[e.prebidGlobalInstanceName];const r=function(t){t.adUnitCode===e.divId&&(a=[t.width,t.height])};function s(e){let t={};for(let n of e)t[n.key]=Array.isArray(n.value)?n.value:[n.value];return t}function c(n){let i=l=>{if(n===l.slot.getSlotElementId()){t.pubads().removeEventListener("slotRenderEnded",i);const d={gamInfo:{lid:l.lineItemId,oid:l.campaignId},adUnit:l.slot.getAdUnitPath()};if(l.isEmpty)return e.callback(!0,void 0,d);{const r=document.getElementById(n);function s(t){return a=a||t.size,setTimeout((()=>{r&&r.parentElement&&(r.parentElement.style.minHeight=a[1]+"px")}),3e3),e.callback(t.isEmpty,void 0,d)}1===l.size[0]&&1===l.size[1]?r&&(o=r,new Promise((e=>{let t,n;n=setTimeout((()=>(clearInterval(t),e())),5e3),t=setInterval((()=>{if(u(o))return clearInterval(t),clearTimeout(n),e()}),200)}))).then((e=>{s(l)})):s(l)}}var o};t.pubads().addEventListener("slotRenderEnded",i)}function u(e){const t=m(e);return t.w>o&&t.h>o}function m(e){let t={w:0,h:0};return e.childNodes.forEach((e=>{if((n=e)&&n instanceof Element){let n=w(e);t.w=Math.max(t.w,n.w),t.h+=n.h}var n})),t}function w(e){const t=e.getBoundingClientRect();return{h:t.height,w:t.width}}d.que=d.que||[],d.que.push((function(){d.onEvent("bidWon",r)})),n.queue.push((function(){c(e.divId),n.newAdSlots([{placementName:i,slotId:e.divId,targeting:l}])}))}catch(g){e.callback(!0,g.message)}}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,